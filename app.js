const servicesPage = document.getElementById('services-page');
const plansPage = document.getElementById('plans-page');
const optionsPage = document.getElementById('options-page');
const cartPage = document.getElementById('cart-page');
const cartCount = document.getElementById('cart-count');
const cartItems = document.getElementById('cart-items');
const totalPrice = document.getElementById('total-price');
const cartIcon = document.getElementById('cart-icon');
const mainLogo = document.getElementById('main-logo');

// –≠–ª–µ–º–µ–Ω—Ç—ã –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥"
const backToServicesBtn = document.getElementById('back-to-services');
const backToPlansBtn = document.getElementById('back-to-plans');
const backToMainBtn = document.getElementById('back-to-main');

// –¢–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä
let currentService = null;
let currentPlan = null;

// –ö–æ—Ä–∑–∏–Ω–∞
let cart = JSON.parse(localStorage.getItem('cart')) || [];

// –ò—Å—Ç–æ—Ä–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
const pageHistory = [];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    updateCartCount();
    setupEventListeners();
});

function addToCart(item) {
  cart.push(item);
  localStorage.setItem('cart', JSON.stringify(cart));
  updateCartCount();
  alert('–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—Ä–∑–∏–Ω–∏!');
}

function updateCartCount() {
    cartCount.textContent = cart.length;
}

function showPage(page) {
    document.querySelectorAll('.page').forEach(p => p.classList.remove('active'));
    page.classList.add('active');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    if (page !== servicesPage) {
        pageHistory.push(page);
    }
}

function setupEventListeners() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤
    document.querySelectorAll('.service-card').forEach(card => {
        card.addEventListener('click', () => {
            const serviceId = card.dataset.service;
            selectService(serviceId);
        });
    });

    import logging
import os
import asyncio
import threading
import time
import json
import re
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, User, BotCommandScopeChat
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from telegram.error import Conflict
from flask import Flask, request, jsonify
from flask_cors import CORS
import psycopg
from psycopg.rows import dict_row
import io
from urllib.parse import unquote

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
bot_running = False
bot_lock = threading.Lock()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', '8181378677:AAFullvwrNhPJMi_HxgC75qSEKWdKOtCpbw')
OWNER_ID_1 = 7106925462  # @HiGki2pYYY
OWNER_ID_2 = 6279578957  # @oc33t
PORT = int(os.getenv('PORT', 8443))
WEBHOOK_URL = os.getenv('WEBHOOK_URL', 'https://secureshop-3obw.onrender.com')
PING_INTERVAL = int(os.getenv('PING_INTERVAL', 840))  # 14 –º–∏–Ω—É—Ç
USE_POLLING = os.getenv('USE_POLLING', 'true').lower() == 'true'
DATABASE_URL = os.getenv('DATABASE_URL', 'postgresql://neondb_owner:npg_1E2GxznybVCR@ep-super-pond-a2ce35gl-pooler.eu-central-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require')

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏
STATS_FILE = "bot_stats.json"

# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î
BUFFER_FLUSH_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç
BUFFER_MAX_SIZE = 50
message_buffer = []
active_conv_buffer = []
user_cache = set()

# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∫—ç—à –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
history_cache = {}

def flush_message_buffer():
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

def flush_active_conv_buffer():
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

def buffer_flush_thread():
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def init_db():
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

def ensure_user_exists(user):
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

def save_message(user_id, message_text, is_from_user):
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

def save_active_conversation(user_id, conversation_type, assigned_owner, last_message):
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

def delete_active_conversation(user_id):
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

def get_conversation_history(user_id, limit=50):
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

def get_all_users():
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

def get_total_users_count():
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
init_db()

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è —Å–±—Ä–æ—Å–∞ –±—É—Ñ–µ—Ä–æ–≤
threading.Thread(target=buffer_flush_thread, daemon=True).start()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
def load_stats():
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

def default_stats():
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

def save_stats():
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
bot_statistics = load_stats()

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
active_conversations = {}
owner_client_map = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
telegram_app = None
flask_app = Flask(__name__)
CORS(flask_app)  # –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤

class TelegramBot:
    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π deep linking —Å —Å–∞–π—Ç–∞"""
        user = update.effective_user
        
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        ensure_user_exists(user)
        
        # –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /start –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (—Å —Å–∞–π—Ç—É)
        if context.args:
            # –°–∫–ª–µ–∏–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
            args_str = " ".join(context.args)
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            logger.info(f"üîÑ –ü–æ–ª—É—á–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã deep link –æ—Ç {user.id} ({user.first_name}):")
            logger.info(f"   –¢–∏–ø: {type(args_str)}")
            logger.info(f"   –î–ª–∏–Ω–∞: {len(args_str)} —Å–∏–º–≤–æ–ª–æ–≤")
            logger.info(f"   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: '{args_str}'")
            
            # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "pay", –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë
            if args_str.startswith("pay"):
                logger.info("üîé –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ pay –≤ deep link, –ø–µ—Ä–µ–¥–∞–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫")
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /pay
                context.args = [args_str]
                await self.pay_command(update, context)
                return
            
            logger.info(f"‚ÑπÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã deep link –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–æ–º–∞–Ω–¥—É pay")
        
        # ---- –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫ /start –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ----
        # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

    async def pay_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /pay –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
        user = update.effective_user
        user_id = user.id
        logger.info(f"üöÄ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /pay –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({user.first_name})")
        
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        ensure_user_exists(user)
        
        # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã
        try:
            if not context.args:
                logger.warning("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ /pay –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
                await update.message.reply_text(
                    "‚ÑπÔ∏è –î–ª—è –æ–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    "/pay service=<–Ω–∞–∑–≤–∞–Ω–∏–µ> plan=<—Ç–∞—Ä–∏—Ñ> period=<–ø–µ—Ä–∏–æ–¥> price=<—Ü–µ–Ω–∞>\n\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: /pay service=ChatGPT plan=Plus period=1 –º–µ—Å—è—Ü price=650"
                )
                return
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
            args_str = " ".join(context.args)
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã /pay:")
            logger.info(f"   –¢–∏–ø: {type(args_str)}")
            logger.info(f"   –î–ª–∏–Ω–∞: {len(args_str)} —Å–∏–º–≤–æ–ª–æ–≤")
            logger.info(f"   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: '{args_str}'")
            
            # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏—à–ª–∞ –∏–∑ deep link (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "pay")
            if args_str.startswith("pay"):
                args_str = args_str[3:].strip()
                logger.info(f"üîß –û–±—Ä–µ–∑–∞–Ω –ø—Ä–µ—Ñ–∏–∫—Å 'pay': '{args_str}'")
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
            original_args = args_str
            args_str = unquote(args_str)
            logger.info(f"üîß –ü–æ—Å–ª–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è URL: '{args_str}'")
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã
            orders = []
            if '_' in args_str:
                # –ù–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ
                order_parts = args_str.split('_')
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(order_parts)} —á–∞—Å—Ç–µ–π –∑–∞–∫–∞–∑–∞")
                
                for part in order_parts:
                    if 'service=' in part:
                        orders.append(part)
                        logger.info(f"   - –î–æ–±–∞–≤–ª–µ–Ω –∑–∞–∫–∞–∑: '{part}'")
            else:
                # –û–¥–∏–Ω —Ç–æ–≤–∞—Ä –≤ –∑–∞–∫–∞–∑–µ
                logger.info("üîç –ù–∞–π–¥–µ–Ω –æ–¥–∏–Ω –∑–∞–∫–∞–∑")
                orders.append(args_str)
            
            logger.info(f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(orders)}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑
            order_texts = []
            total_price = 0
            
            for i, order_str in enumerate(orders, 1):
                logger.info(f"üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ #{i}: '{order_str}'")
                
                # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
                params = {}
                pattern = r'(\w+)=([^=:]+)'
                matches = re.findall(pattern, order_str)
                
                logger.info(f"   üîç –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {len(matches)}")
                for key, value in matches:
                    params[key.lower()] = value.strip()
                    logger.info(f"      - {key} = {value.strip()}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                required = ['service', 'period', 'price']
                for param in required:
                    if param not in params:
                        error_msg = f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: {param}"
                        logger.warning(error_msg)
                        await update.message.reply_text(
                            f"{error_msg}\n\n"
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã."
                        )
                        return
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
                service = params.get('service', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å')
                plan = params.get('plan', '')
                period = params.get('period', '')
                price = params.get('price', 0)
                
                try:
                    price_val = int(price)
                    total_price += price_val
                    logger.info(f"   üíµ –¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞: {price_val} UAH")
                except ValueError:
                    error_msg = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º."
                    logger.error(error_msg)
                    await update.message.reply_text(error_msg)
                    return
                
                order_text = f"‚ñ´Ô∏è {service}"
                if plan:
                    order_text += f" {plan}"
                order_text += f" ({period}) - {price} UAH"
                order_texts.append(order_text)
                logger.info(f"   ‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞: '{order_text}'")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
            full_order_text = "üõçÔ∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n" + "\n".join(order_texts)
            if len(orders) > 1:
                full_order_text += f"\n\nüí≥ –í—Å—å–æ–≥–æ: {total_price} UAH"
            
            logger.info(f"üìù –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞:\n{full_order_text}")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–∫–∞–∑–µ
            active_conversations[user_id] = {
                'type': 'order',
                'user_info': user,
                'assigned_owner': None,
                'order_details': full_order_text,
                'last_message': full_order_text,
                'from_website': True
            }
            
            logger.info("üíæ –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–∞—Ö")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            save_active_conversation(user_id, 'order', None, full_order_text)
            logger.info("üíæ –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            bot_statistics['total_orders'] += len(orders)
            save_stats()
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: total_orders = {bot_statistics['total_orders']}")
            
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∑–∞–∫–∞–∑ –æ–±–æ–∏–º –≤–ª–∞–¥–µ–ª—å—Ü–∞–º
            logger.info("üì§ –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∑–∞–∫–∞–∑ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º...")
            await self.forward_order_to_owners(
                context, 
                user_id, 
                user, 
                full_order_text
            )
            
            logger.info("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            await update.message.reply_text(
                "‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ! –ó–∞—Å–Ω–æ–≤–Ω–∏–∫ –º–∞–≥–∞–∑–∏–Ω—É –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.\n\n"
                "–í–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∑ —ñ–Ω—à–∏–º –∑–∞–ø–∏—Ç–∞–Ω–Ω—è–º –∞–±–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º."
            )
            
        except Exception as e:
            logger.error(f"üî• –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏ /pay: {e}", exc_info=True)
            logger.error(f"‚ö†Ô∏è –ò—Å—Ö–æ–¥–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã: '{original_args}'")
            logger.error(f"‚ö†Ô∏è –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã: '{args_str}'")
            await update.message.reply_text(
                "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
            )
    
    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

    async def forward_order_to_owners(self, context, client_id, client_info, order_text):
        """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –∑–∞–∫–∞–∑ –æ–±–æ–∏–º –≤–ª–∞–¥–µ–ª—å—Ü–∞–º"""
        logger.info(f"üì® –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∑–∞–∫–∞–∑ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        active_conversations[client_id]['last_message'] = order_text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        save_active_conversation(client_id, 'order', None, order_text)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –æ —Å–∞–π—Ç–µ, –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –æ—Ç—Ç—É–¥–∞
        source = "–∑ —Å–∞–π—Ç—É" if active_conversations[client_id].get('from_website', False) else ""
        
        forward_message = f"""
üõí –ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø {source}!

üë§ –ö–ª—ñ—î–Ω—Ç: {client_info.first_name}
üì± Username: @{client_info.username if client_info.username else '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}
üÜî ID: {client_info.id}
üåê –Ø–∑—ã–∫: {client_info.language_code or '–Ω–µ —É–∫–∞–∑–∞–Ω'}

üìã –î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:
{order_text}

---
–ù–∞–∂–º–∏—Ç–µ "‚úÖ –í–∑—è—Ç—å", —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑.
        """
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –í–∑—è—Ç—å", callback_data=f'take_order_{client_id}')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–æ–∏–º –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è–º
        for owner_id in [OWNER_ID_1, OWNER_ID_2]:
            try:
                logger.info(f"   üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤–ª–∞–¥–µ–ª—å—Ü—É {owner_id}")
                await context.bot.send_message(
                    chat_id=owner_id,
                    text=forward_message.strip(),
                    reply_markup=reply_markup
                )
                logger.info(f"   ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü—É {owner_id}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é {owner_id}: {e}")

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ Flask –∏ –∑–∞–ø—É—Å–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∫–æ–Ω–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
    if (cartIcon) cartIcon.addEventListener('click', showCart);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥"
    if (backToServicesBtn) backToServicesBtn.addEventListener('click', () => showPage(servicesPage));
    if (backToPlansBtn) backToPlansBtn.addEventListener('click', () => showPage(plansPage));
    
    // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤ –∫–æ—Ä–∑–∏–Ω–µ –≤–µ–¥–µ—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    if (backToMainBtn) backToMainBtn.addEventListener('click', goToHome);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–∞
    if (mainLogo) mainLogo.addEventListener('click', goToHome);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const orderMenu = document.getElementById('order-menu');
    if (orderMenu) {
        orderMenu.addEventListener('click', (e) => {
            if (e.target === orderMenu) {
                closeOrderMenu();
            }
        });
    }
}

function goToHome() {
    // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    pageHistory.length = 0;
    showPage(servicesPage);
}

function selectService(serviceId) {
    currentService = products[serviceId];
    document.getElementById('service-name').textContent = currentService.name;
    
    const plansContainer = document.getElementById('plans-container');
    if (plansContainer) {
        plansContainer.innerHTML = '';
        
        currentService.plans.forEach(plan => {
            const planCard = document.createElement('div');
            planCard.className = 'plan-card';
            planCard.innerHTML = `
                <h2>${plan.name}</h2>
                <p>${plan.description}</p>
                <button class="add-to-cart">–û–±—Ä–∞—Ç–∏</button>
            `;
            plansContainer.appendChild(planCard);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏
            planCard.querySelector('button').addEventListener('click', () => {
                selectPlan(plan.id);
            });
        });
    }
    
    showPage(plansPage);
}

function selectPlan(planId) {
    if (!currentService) return;
    
    const plan = currentService.plans.find(p => p.id === planId);
    if (!plan) return;
    
    currentPlan = plan;
    document.getElementById('plan-name').textContent = `${currentService.name} ${currentPlan.name}`;
    document.getElementById('plan-description').textContent = currentPlan.description;
    
    const optionsContainer = document.getElementById('options-container');
    if (optionsContainer) {
        optionsContainer.innerHTML = '';
        
        currentPlan.options.forEach(option => {
            const optionCard = document.createElement('div');
            optionCard.className = 'option-card';
            optionCard.innerHTML = `
                <div class="period">${option.period}</div>
                <div class="price">${option.price} UAH</div>
                <button class="add-to-cart">–î–æ–¥–∞—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É</button>
            `;
            optionsContainer.appendChild(optionCard);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏
            optionCard.querySelector('button').addEventListener('click', () => {
                addItemToCart(option.period, option.price);
            });
        });
    }
    
    showPage(optionsPage);
}

function addItemToCart(period, price) {
    if (!currentService || !currentPlan) return;
    
    const item = {
        service: currentService.name,
        plan: currentPlan.name,
        period,
        price
    };
    
    addToCart(item);
}

function showCart() {
    updateCartView();
    showPage(cartPage);
}

function updateCartView() {
    if (!cartItems) return;
    
    cartItems.innerHTML = '';
    
    if (cart.length === 0) {
        cartItems.innerHTML = '<p class="empty-cart">–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è</p>';
        totalPrice.textContent = '0';
        return;
    }
    
    let total = 0;
    
    cart.forEach((item, index) => {
        total += item.price;
        
        const cartItem = document.createElement('div');
        cartItem.className = 'cart-item';
        cartItem.innerHTML = `
            <div class="cart-item-info">
                <h3>${item.service} ${item.plan}</h3>
                <p>${item.period}</p>
            </div>
            <div class="cart-item-price">${item.price} UAH</div>
            <div class="cart-item-arrow">
                <i class="fas fa-chevron-right"></i>
            </div>
        `;
        
        cartItem.addEventListener('click', () => showOrderMenu(index));
        cartItems.appendChild(cartItem);
    });
    
    if (totalPrice) totalPrice.textContent = total;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    const checkoutBtn = document.querySelector('.checkout-btn');
    if (checkoutBtn) {
        checkoutBtn.addEventListener('click', checkout);
    }
}

function goBack() {
    if (pageHistory.length > 0) {
        const prevPage = pageHistory.pop();
        showPage(prevPage);
    } else {
        showPage(servicesPage);
    }
}

function showOrderMenu(index) {
    if (index >= cart.length) return;
    
    const item = cart[index];
    document.getElementById('order-item-title').textContent = `${item.service} ${item.plan}`;
    document.getElementById('order-service').textContent = item.service;
    document.getElementById('order-plan').textContent = item.plan;
    document.getElementById('order-period').textContent = item.period;
    document.getElementById('order-price').textContent = item.price;
    
    const orderMenu = document.getElementById('order-menu');
    if (orderMenu) {
        orderMenu.dataset.index = index;
        orderMenu.classList.add('active');
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é
        document.querySelector('.remove-btn')?.addEventListener('click', removeFromCart);
        document.querySelector('.order-btn')?.addEventListener('click', orderSingleItem);
        document.querySelector('.close-btn')?.addEventListener('click', closeOrderMenu);
    }
}

function closeOrderMenu() {
    const orderMenu = document.getElementById('order-menu');
    if (orderMenu) orderMenu.classList.remove('active');
}

function removeFromCart() {
    const orderMenu = document.getElementById('order-menu');
    if (!orderMenu) return;
    
    const index = orderMenu.dataset.index;
    if (index >= 0 && index < cart.length) {
        cart.splice(index, 1);
        localStorage.setItem('cart', JSON.stringify(cart));
        updateCartCount();
        updateCartView();
        closeOrderMenu();
    }
}

function orderSingleItem() {
    const orderMenu = document.getElementById('order-menu');
    if (!orderMenu) return;
    
    const index = orderMenu.dataset.index;
    if (index >= 0 && index < cart.length) {
        const item = cart[index];
        createOrder([item]);
    }
}

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ Telegram deep link
function checkout() {
    if (cart.length === 0) {
        alert('–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è!');
        return;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /pay
    let payCommand = "pay";
    
    cart.forEach((item, index) => {
        // –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        // –î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö - —Ä–∞–∑–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª–æ–º '_'
        const separator = index > 0 ? "_" : "";
        
        payCommand += `${separator}service=${encodeURIComponent(item.service)}`;
        if (item.plan) {
            payCommand += `:plan=${encodeURIComponent(item.plan)}`;
        }
        payCommand += `:period=${encodeURIComponent(item.period)}`;
        payCommand += `:price=${item.price}`;
    });
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let userMessage = "üõí –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n";
    let total = 0;
    
    cart.forEach(item => {
        userMessage += `‚ñ´Ô∏è ${item.service} ${item.plan || ''} (${item.period}) - ${item.price} UAH\n`;
        total += item.price;
    });
    
    userMessage += `\nüí≥ –í—Å—å–æ–≥–æ: ${total} UAH`;
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è Telegram
    const botUsername = "secureshopBot"; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è –±–æ—Ç–∞
    const telegramUrl = `https://t.me/${botUsername}?start=${payCommand}`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    const confirmSend = confirm(`${userMessage}\n\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å OK, —â–æ–± –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±–æ—Ç—É.`);
    
    if (confirmSend) {
        window.open(telegramUrl, '_blank');
        
        // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        cart = [];
        localStorage.setItem('cart', JSON.stringify(cart));
        updateCartCount();
        updateCartView();
        showPage(servicesPage);
    }
}

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
function createOrder(items) {
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /pay
    let payCommand = "pay";
    
    items.forEach((item, index) => {
        // –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        // –î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö - —Ä–∞–∑–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª–æ–º '_'
        const separator = index > 0 ? "_" : "";
        
        payCommand += `${separator}service=${encodeURIComponent(item.service)}`;
        if (item.plan) {
            payCommand += `:plan=${encodeURIComponent(item.plan)}`;
        }
        payCommand += `:period=${encodeURIComponent(item.period)}`;
        payCommand += `:price=${item.price}`;
    });
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let userMessage = "üõí –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n";
    let total = 0;
    
    items.forEach(item => {
        userMessage += `‚ñ´Ô∏è ${item.service} ${item.plan || ''} (${item.period}) - ${item.price} UAH\n`;
        total += item.price;
    });
    
    if (items.length > 1) {
        userMessage += `\nüí≥ –í—Å—å–æ–≥–æ: ${total} UAH`;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è Telegram
    const botUsername = "secureshopBot"; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è –±–æ—Ç–∞
    const telegramUrl = `https://t.me/${botUsername}?start=${payCommand}`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    const confirmSend = confirm(`${userMessage}\n\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å OK, —â–æ–± –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±–æ—Ç—É.`);
    
    if (confirmSend) {
        window.open(telegramUrl, '_blank');
        
        // –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        const orderMenu = document.getElementById('order-menu');
        if (orderMenu) {
            const index = orderMenu.dataset.index;
            if (index >= 0 && index < cart.length) {
                cart.splice(index, 1);
                localStorage.setItem('cart', JSON.stringify(cart));
                updateCartCount();
                updateCartView();
            }
        }
        
        closeOrderMenu();
    }
}
