// app.js

const mainPage = document.getElementById('main-page');
const subscriptionsPage = document.getElementById('subscriptions-page');
const digitalPage = document.getElementById('digital-page');
const discordDecorTypePage = document.getElementById('discord-decor-type-page');
const plansPage = document.getElementById('plans-page');
const optionsPage = document.getElementById('options-page');
const cartPage = document.getElementById('cart-page');
const cartCount = document.getElementById('cart-count');
const cartItems = document.getElementById('cart-items');
const totalPrice = document.getElementById('total-price');
const cartIcon = document.getElementById('cart-icon');
const mainLogo = document.getElementById('main-logo');

// –≠–ª–µ–º–µ–Ω—Ç—ã –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥"
const backToMainCategoryBtn = document.getElementById('back-to-main-category');
const backToMainCategoryDigitalBtn = document.getElementById('back-to-main-category-digital');
const backToServicesBtn = document.getElementById('back-to-services');
const backToPlansBtn = document.getElementById('back-to-plans');
const backToMainFromCartBtn = document.getElementById('back-to-main-from-cart');
const backToDigitalBtn = document.getElementById('back-to-digital');

// –¢–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä
let currentService = null;
let currentPlan = null;

// –ö–æ—Ä–∑–∏–Ω–∞
let cart = JSON.parse(localStorage.getItem('cart')) || [];

// –ò—Å—Ç–æ—Ä–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
const pageHistory = [];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    updateCartCount();
    setupEventListeners();

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ—Å—Ç—Ä–æ–≤–∫–∞ Discord —É–∫—Ä–∞—à–µ–Ω–∏–π
    const tabWithoutNitro = document.getElementById('tab-without-nitro');
    const tabWithNitro = document.getElementById('tab-with-nitro');

    if (tabWithoutNitro) {
        tabWithoutNitro.addEventListener('click', () => {
            currentService = discordDecorProducts;
            document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
            tabWithoutNitro.classList.add('active');
            showDiscordDecorOptions('discord_decor_without_nitro');
        });
    }

    if (tabWithNitro) {
        tabWithNitro.addEventListener('click', () => {
            currentService = discordDecorProducts;
            document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
            tabWithNitro.classList.add('active');
            showDiscordDecorOptions('discord_decor_with_nitro');
        });
    }
});

function addToCart(item) {
  cart.push(item);
  localStorage.setItem('cart', JSON.stringify(cart));
  updateCartCount();
  alert('–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—Ä–∑–∏–Ω–∏!');
}

function updateCartCount() {
    cartCount.textContent = cart.length;
}

function showPage(page) {
    document.querySelectorAll('.page').forEach(p => p.classList.remove('active'));
    page.classList.add('active');
    
    if (page !== mainPage) {
        pageHistory.push(page);
    }
}

function setupEventListeners() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–Ω–æ–≤—ã–µ)
    document.querySelectorAll('.category-card').forEach(card => {
        card.addEventListener('click', () => {
            const category = card.dataset.category;
            if (category === 'subscriptions') {
                showPage(subscriptionsPage);
            } else if (category === 'digital') {
                showPage(digitalPage);
            }
        });
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤
    document.querySelectorAll('.service-card').forEach(card => {
        card.addEventListener('click', () => {
            const serviceId = card.dataset.service;
            selectService(serviceId);
        });
    });
    
    if (cartIcon) cartIcon.addEventListener('click', showCart);
    
    if (backToMainCategoryBtn) backToMainCategoryBtn.addEventListener('click', () => showPage(mainPage));
    if (backToMainCategoryDigitalBtn) backToMainCategoryDigitalBtn.addEventListener('click', () => showPage(mainPage));
    if (backToServicesBtn) backToServicesBtn.addEventListener('click', goBackToServices);
    if (backToPlansBtn) backToPlansBtn.addEventListener('click', () => showPage(plansPage));
    if (backToMainFromCartBtn) backToMainFromCartBtn.addEventListener('click', goToHome);
    if (backToDigitalBtn) backToDigitalBtn.addEventListener('click', () => {
        showPage(digitalPage);
        document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
        if (document.getElementById('tab-without-nitro')) {
            document.getElementById('tab-without-nitro').classList.add('active');
        }
        const optionsContainer = document.getElementById('options-container');
        if (optionsContainer) {
            optionsContainer.innerHTML = '';
        }
        currentService = null;
        currentPlan = null;
    });
    
    if (mainLogo) mainLogo.addEventListener('click', goToHome);
    
    const orderMenu = document.getElementById('order-menu');
    if (orderMenu) {
        orderMenu.addEventListener('click', (e) => {
            if (e.target === orderMenu) {
                closeOrderMenu();
            }
        });
    }
}

function goToHome() {
    pageHistory.length = 0;
    showPage(mainPage);
    document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
    if (document.getElementById('tab-without-nitro')) {
        document.getElementById('tab-without-nitro').classList.add('active');
    }
    const optionsContainer = document.getElementById('options-container');
    if (optionsContainer) {
        optionsContainer.innerHTML = '';
    }
    currentService = null;
    currentPlan = null;
}

function goBackToServices() {
    if (currentService === discordDecorProducts) {
        showPage(digitalPage);
        document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
        if (document.getElementById('tab-without-nitro')) {
            document.getElementById('tab-without-nitro').classList.add('active');
        }
        const optionsContainer = document.getElementById('options-container');
        if (optionsContainer) {
            optionsContainer.innerHTML = '';
        }
        currentService = null;
        currentPlan = null;
    } else {
        showPage(subscriptionsPage);
    }
}

function selectService(serviceId) {
    if (serviceId === 'discord_decor') {
        showPage(discordDecorTypePage);
        currentService = discordDecorProducts;
        showDiscordDecorOptions('discord_decor_without_nitro');
        return;
    }

    currentService = products[serviceId];
    document.getElementById('service-name').textContent = currentService.name;

    const plansContainer = document.getElementById('plans-container');
    if (plansContainer) {
        plansContainer.innerHTML = '';

        currentService.plans.forEach(plan => {
            const planCard = document.createElement('div');
            planCard.className = 'plan-card';
            planCard.innerHTML = `
                <h2>${plan.name}</h2>
                <p>${plan.description}</p>
                <button class="add-to-cart select-plan-btn" data-plan-id="${plan.id}">–û–±—Ä–∞—Ç–∏</button>
            `;
            plansContainer.appendChild(planCard);

            planCard.querySelector('.select-plan-btn').addEventListener('click', (e) => {
                const planId = e.target.dataset.planId;
                selectPlan(planId);
            });
        });
    }
    showPage(plansPage);
}

function showDiscordDecorOptions(planId) {
    if (!currentService || currentService !== discordDecorProducts) return;

    const plan = currentService.plans.find(p => p.id === planId);
    if (!plan) return;

    currentPlan = plan;

    const optionsContainer = document.getElementById('options-container');
    if (optionsContainer) {
        optionsContainer.innerHTML = '';

        currentPlan.options.forEach(option => {
            const optionCard = document.createElement('div');
            optionCard.className = 'option-card';
            optionCard.innerHTML = `
                <div class="period">${option.period}</div>
                <div class="price">${option.price} UAH</div>
                <button class="add-to-cart">–î–æ–¥–∞—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É</button>
            `;
            optionsContainer.appendChild(optionCard);

            optionCard.querySelector('button').addEventListener('click', () => {
                addItemToCart(option.period, option.price);
            });
        });
    }
}

// –£–ü–†–û–©–ï–ù–ù–ê–Ø –ò –û–¢–õ–ê–ñ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø selectPlan
function selectPlan(planId) {
    console.log("=== selectPlan called ===");
    console.log("planId:", planId);
    console.log("currentService:", currentService);
    
    if (!currentService) {
        console.error("‚ùå ERROR: currentService is null or undefined");
        return;
    }

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è Discord —É–∫—Ä–∞—à–µ–Ω–∏–π
    if (currentService === discordDecorProducts) {
        console.log("üì¶ Handling discord decor products - this should not happen here");
        return;
    } else {
        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        console.log("üìã Handling regular subscription products");
        
        // –ù–∞–π–¥–µ–º –ø–ª–∞–Ω
        const plan = currentService.plans.find(p => p.id === planId);
        console.log("üîç Found plan:", plan);
        
        if (!plan) {
            console.error("‚ùå ERROR: Plan not found for id:", planId);
            return;
        }

        // –£—Å—Ç–∞–Ω–æ–≤–∏–º —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω
        currentPlan = plan;
        console.log("‚úÖ Current plan set:", currentPlan);

        // –û–±–Ω–æ–≤–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const planNameElement = document.getElementById('plan-name');
        const planDescriptionElement = document.getElementById('plan-description');
        
        if (planNameElement) {
            planNameElement.textContent = `${currentService.name} ${currentPlan.name}`;
            console.log("‚úÖ Plan name updated");
        } else {
            console.error("‚ùå ERROR: plan-name element not found");
        }
        
        if (planDescriptionElement) {
            planDescriptionElement.textContent = currentPlan.description;
            console.log("‚úÖ Plan description updated");
        } else {
            console.error("‚ùå ERROR: plan-description element not found");
        }

        // –ù–∞–π–¥–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ–ø—Ü–∏–π
        const optionsContainer = document.getElementById('options-container');
        console.log("üì¶ optionsContainer element:", optionsContainer);
        
        if (optionsContainer) {
            // –û—á–∏—Å—Ç–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            optionsContainer.innerHTML = '';
            console.log("üßπ optionsContainer cleared");
            
            // –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ –æ–ø—Ü–∏–π
            console.log("üìã Plan options:", plan.options);
            
            if (plan.options && plan.options.length > 0) {
                console.log(`üìä Found ${plan.options.length} options, creating cards...`);
                
                plan.options.forEach((option, index) => {
                    console.log(`   üì¶ Creating option card ${index}:`, option);
                    
                    const optionCard = document.createElement('div');
                    optionCard.className = 'option-card';
                    optionCard.innerHTML = `
                        <div class="period">${option.period}</div>
                        <div class="price">${option.price} UAH</div>
                        <button class="add-to-cart" data-option-index="${index}">–î–æ–¥–∞—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É</button>
                    `;
                    optionsContainer.appendChild(optionCard);

                    // –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
                    const button = optionCard.querySelector('button');
                    if (button) {
                        button.addEventListener('click', () => {
                            console.log("üñ±Ô∏è Add to cart button clicked for option:", option);
                            addItemToCart(option.period, option.price);
                        });
                        console.log(`   ‚úÖ Event listener added for option ${index}`);
                    } else {
                        console.error(`   ‚ùå ERROR: Button not found for option ${index}`);
                    }
                });
                console.log("‚úÖ All option cards created");
            } else {
                // –ï—Å–ª–∏ –æ–ø—Ü–∏–π –Ω–µ—Ç
                optionsContainer.innerHTML = '<p class="empty-cart">–û–ø—Ü—ñ—ó –¥–ª—è —Ü—å–æ–≥–æ —Ç–∞—Ä–∏—Ñ—É –≤—ñ–¥—Å—É—Ç–Ω—ñ</p>';
                console.log("‚ö†Ô∏è No options found, showing message");
            }
        } else {
            console.error("‚ùå ERROR: optionsContainer element not found in DOM");
        }
        
        // –ü–æ–∫–∞–∂–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ–ø—Ü–∏—è–º–∏
        console.log("‚û°Ô∏è Showing options page");
        showPage(optionsPage);
        console.log("=== selectPlan finished ===");
    }
}

function addItemToCart(period, price) {
    if (!currentService || !currentPlan) return;
    
    const item = {
        service: currentService.name,
        plan: currentPlan.name,
        period,
        price
    };
    
    addToCart(item);
}

function showCart() {
    updateCartView();
    showPage(cartPage);
}

function updateCartView() {
    if (!cartItems) return;
    
    cartItems.innerHTML = '';
    
    if (cart.length === 0) {
        cartItems.innerHTML = '<p class="empty-cart">–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è</p>';
        totalPrice.textContent = '0';
        return;
    }
    
    let total = 0;
    
    cart.forEach((item, index) => {
        total += item.price;
        
        const cartItem = document.createElement('div');
        cartItem.className = 'cart-item';
        cartItem.innerHTML = `
            <div class="cart-item-info">
                <h3>${item.service} ${item.plan}</h3>
                <p>${item.period}</p>
            </div>
            <div class="cart-item-price">${item.price} UAH</div>
            <div class="cart-item-arrow">
                <i class="fas fa-chevron-right"></i>
            </div>
        `;
        
        cartItem.addEventListener('click', () => showOrderMenu(index));
        cartItems.appendChild(cartItem);
    });
    
    if (totalPrice) totalPrice.textContent = total;
    
    const checkoutBtn = document.querySelector('.checkout-btn');
    if (checkoutBtn) {
        checkoutBtn.addEventListener('click', checkout);
    }
}

function goBack() {
    if (pageHistory.length > 0) {
        const prevPage = pageHistory.pop();
        showPage(prevPage);
    } else {
        showPage(mainPage);
    }
}

function showOrderMenu(index) {
    if (index >= cart.length) return;
    
    const item = cart[index];
    document.getElementById('order-item-title').textContent = `${item.service} ${item.plan}`;
    document.getElementById('order-service').textContent = item.service;
    document.getElementById('order-plan').textContent = item.plan;
    document.getElementById('order-period').textContent = item.period;
    document.getElementById('order-price').textContent = item.price;
    
    const orderMenu = document.getElementById('order-menu');
    if (orderMenu) {
        orderMenu.dataset.index = index;
        orderMenu.classList.add('active');
        
        document.querySelector('.remove-btn')?.addEventListener('click', removeFromCart);
        document.querySelector('.order-btn')?.addEventListener('click', orderSingleItem);
        document.querySelector('.close-btn')?.addEventListener('click', closeOrderMenu);
    }
}

function closeOrderMenu() {
    const orderMenu = document.getElementById('order-menu');
    if (orderMenu) orderMenu.classList.remove('active');
}

function removeFromCart() {
    const orderMenu = document.getElementById('order-menu');
    if (!orderMenu) return;
    
    const index = orderMenu.dataset.index;
    if (index >= 0 && index < cart.length) {
        cart.splice(index, 1);
        localStorage.setItem('cart', JSON.stringify(cart));
        updateCartCount();
        updateCartView();
        closeOrderMenu();
    }
}

function generateBotCommand(items) {
    const orderId = 'O' + Date.now().toString().slice(-6);
    
    let command = `/pay ${orderId} `;
    
    items.forEach(item => {
        let serviceAbbr;
        if (item.service.includes('ChatGPT')) serviceAbbr = "Cha";
        else if (item.service.includes('Discord –£–∫—Ä–∞—à–µ–Ω–Ω—è')) serviceAbbr = "DisU";
        else if (item.service.includes('Discord')) serviceAbbr = "Dis";
        else if (item.service.includes('Duolingo')) serviceAbbr = "Duo";
        else if (item.service.includes('PicsArt')) serviceAbbr = "Pic";
        else if (item.service.includes('Canva')) serviceAbbr = "Can";
        else if (item.service.includes('Netflix')) serviceAbbr = "Net";
        else serviceAbbr = item.service.substring(0, 3);
        
        let planAbbr;
        if (item.plan.includes('Basic')) planAbbr = "Bas";
        else if (item.plan.includes('Full')) planAbbr = "Ful";
        else if (item.plan.includes('Individual')) planAbbr = "Ind";
        else if (item.plan.includes('Family')) planAbbr = "Fam";
        else if (item.plan.includes('Plus')) planAbbr = "Plu";
        else if (item.plan.includes('Pro')) planAbbr = "Pro";
        else if (item.plan.includes('Premium')) planAbbr = "Pre";
        else if (item.plan.includes('–ë–µ–∑ Nitro')) planAbbr = "BzN";
        else if (item.plan.includes('–ó Nitro')) planAbbr = "ZN";
        else planAbbr = item.plan.substring(0, 3);
        
        const periodAbbr = item.period.replace('–º—ñ—Å—è—Ü—å', '–º').replace('–º—ñ—Å—è—Ü—ñ–≤', '–º');
        
        command += `${serviceAbbr}-${planAbbr}-${periodAbbr}-${item.price} `;
    });
    
    return {
        command: command.trim(),
        orderId: orderId
    };
}

async function checkout() {
    if (cart.length === 0) {
        alert('–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è!');
        return;
    }
    
    const { command, orderId } = generateBotCommand(cart);
    
    const botUsername = "secureshopBot";
    const telegramUrl = `https://t.me/${botUsername}`;
    
    const message = `–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #${orderId} –≥–æ—Ç–æ–≤–µ!\n\n` +
                   `–°–∫–æ–ø—ñ—é–π—Ç–µ —Ü—é –∫–æ–º–∞–Ω–¥—É —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —ó—ó –Ω–∞—à–æ–º—É –±–æ—Ç—É:\n\n` +
                   `<code>${command}</code>\n\n` +
                   `–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–í—ñ–¥–∫—Ä–∏—Ç–∏ Telegram", —â–æ–± –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –±–æ—Ç–∞.`;
    
    const modal = document.createElement('div');
    modal.className = 'order-modal';
    modal.innerHTML = `
        <div class="modal-content">
            <h2>–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #${orderId}</h2>
            <div class="modal-message">${message}</div>
            <div class="modal-actions">
                <button class="copy-btn">–ö–æ–ø—ñ—é–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É</button>
                <button class="telegram-btn">–í—ñ–¥–∫—Ä–∏—Ç–∏ Telegram</button>
                <button class="close-modal">–ó–∞–∫—Ä–∏—Ç–∏</button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    modal.querySelector('.copy-btn').addEventListener('click', () => {
        navigator.clipboard.writeText(command)
            .then(() => alert('–ö–æ–º–∞–Ω–¥—É —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ!'))
            .catch(err => console.error('–ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è:', err));
    });
    
    modal.querySelector('.telegram-btn').addEventListener('click', () => {
        window.open(telegramUrl, '_blank');
    });
    
    modal.querySelector('.close-modal').addEventListener('click', () => {
        document.body.removeChild(modal);
    });
    
    cart = [];
    localStorage.setItem('cart', JSON.stringify(cart));
    updateCartCount();
    updateCartView();
    showPage(mainPage);
    document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
    if (document.getElementById('tab-without-nitro')) {
        document.getElementById('tab-without-nitro').classList.add('active');
    }
    const optionsContainer = document.getElementById('options-container');
    if (optionsContainer) {
        optionsContainer.innerHTML = '';
    }
    currentService = null;
    currentPlan = null;
}

async function orderSingleItem() {
    const orderMenu = document.getElementById('order-menu');
    if (!orderMenu) return;
    
    const index = orderMenu.dataset.index;
    if (index >= 0 && index < cart.length) {
        const item = cart[index];
        
        const { command, orderId } = generateBotCommand([item]);
        
        const botUsername = "secureshopBot";
        const telegramUrl = `https://t.me/${botUsername}`;
        
        const message = `–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #${orderId} –≥–æ—Ç–æ–≤–µ!\n\n` +
                       `–°–∫–æ–ø—ñ—é–π—Ç–µ —Ü—é –∫–æ–º–∞–Ω–¥—É —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —ó—ó –Ω–∞—à–æ–º—É –±–æ—Ç—É:\n\n` +
                       `<code>${command}</code>\n\n` +
                       `–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–í—ñ–¥–∫—Ä–∏—Ç–∏ Telegram", —â–æ–± –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –±–æ—Ç–∞.`;
        
        const modal = document.createElement('div');
        modal.className = 'order-modal';
        modal.innerHTML = `
            <div class="modal-content">
                <h2>–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #${orderId}</h2>
                <div class="modal-message">${message}</div>
                <div class="modal-actions">
                    <button class="copy-btn">–ö–æ–ø—ñ—é–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É</button>
                    <button class="telegram-btn">–í—ñ–¥–∫—Ä–∏—Ç–∏ Telegram</button>
                    <button class="close-modal">–ó–∞–∫—Ä–∏—Ç–∏</button>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        modal.querySelector('.copy-btn').addEventListener('click', () => {
            navigator.clipboard.writeText(command)
                .then(() => alert('–ö–æ–º–∞–Ω–¥—É —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ!'))
                .catch(err => console.error('–ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è:', err));
        });
        
        modal.querySelector('.telegram-btn').addEventListener('click', () => {
            window.open(telegramUrl, '_blank');
        });
        
        modal.querySelector('.close-modal').addEventListener('click', () => {
            document.body.removeChild(modal);
        });
        
        cart.splice(index, 1);
        localStorage.setItem('cart', JSON.stringify(cart));
        updateCartCount();
        updateCartView();
        closeOrderMenu();
    }
}
